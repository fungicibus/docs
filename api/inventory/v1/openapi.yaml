openapi: 3.0.0
info:
  title: Fungicibus Inventory Service API
  description: API for managing products supplies
  version: 1.0.0
servers:
  - url: /api/v1

paths:
  /commodities:
    get:
      tags:
        - commodities
      summary: Get list of all commodities
      operationId: GetCommodities
      parameters:
        - name: name
          in: query
          required: false
          schema:
            type: string
          description: Filter commodities by name (partial match)
      responses:
        "200":
          description: List of all commodities
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetCommoditiesResponse"
        "400":
          description: Request error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    post:
      tags:
        - commodities
      summary: Create commodity
      operationId: CreateCommodity
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateCommodityRequest"
      responses:
        "201":
          description: Created commodity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateCommodityResponse"
        "400":
          description: Request error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /commodities/{commodityID}:
    parameters:
      - name: commodityID
        in: path
        required: true
        description: Unique identifier of the commodity
        schema:
          type: string
        example: "08d2e30b-8e64-4414-9fee-ad93c80a5261" # if UUID
    get:
      tags:
        - commodities
      summary: Get single commodity by id
      operationId: GetCommodity
      responses:
        "200":
          description: Commodity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetCommodityResponse"
        "400":
          description: Request error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /transactions:
    post:
      tags:
        - transactions
      summary: Create transaction
      operationId: CreateTransaction
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateTransactionRequest"
      responses:
        "201":
          description: Transaction created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateTransactionResponse"
        "400":
          description: Request error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

components:
  schemas:
    # Commodities
    CategoryType:
      type: string
      enum:
        - culinary
        - medicinal
        - exotic
      example: exotic
    GetCommoditiesResponse:
      type: object
      required:
        - data
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/CommodityItem"
    CommodityItem:
      type: object
      required:
        - id
        - name
        - sku
        - description
        - category
        - quantity
        - package
        - price
      properties:
        id:
          type: string
          example: 08d2e30b-8e64-4414-9fee-ad93c80a5261
        name:
          type: string
          example: Fly Agaric
        sku:
          type: string
          description: Stock keeping unit is the unit of measure in which the stocks of a material are managed
          example: EXO-DRY-FAG
        description:
          type: string
          example: Amanita muscaria. The edible caps
        category:
          $ref: "#/components/schemas/CategoryType"
        quantity:
          type: integer
          description: Count of packages
          example: 10
        package:
          type: string
          description: Type of a package
          example: 1 dried piece
        price:
          type: number
          format: float
          example: 1.99
    GetCommodityResponse:
      type: object
      required:
        - data
      properties:
        data:
          $ref: "#/components/schemas/CommodityItem"
    CreateCommodityRequest:
      type: object
      required:
        - data
      properties:
        data:
          $ref: "#/components/schemas/CreateCommodityItem"
    CreateCommodityItem:
      type: object
      required:
        - name
        - description
        - category
        - quantity
        - package
        - price
      properties:
        name:
          type: string
          example: Fly Agaric
        description:
          type: string
          example: Amanita muscaria. The edible caps
        category:
          $ref: "#/components/schemas/CategoryType"
        quantity:
          type: integer
          description: Count of packages
          example: 10
        package:
          type: string
          description: Type of a package
          example: 1 dried piece
        price:
          type: number
          format: float
          example: 1.99
    CreateCommodityResponse:
      type: object
      required:
        - data
      properties:
        data:
          $ref: "#/components/schemas/CommodityItem"

    # Transactions
    TransactionType:
      type: string
      enum:
        - sale
        - supply
      example: "supply"
    TransactionItem:
      type: object
      required:
        - id
        - commodityID
        - amount
        - type
        - createdAt
      properties:
        id:
          type: string
          example: "08d2e30b-8e64-4414-9fee-ad93c80a5264"
        commodityID:
          type: string
          example: "08d2e30b-8e64-4414-9fee-ad93c80a5264"
        amount:
          type: integer
          description: Number representing quantity change, positive or negative
          example: 5
        type:
          $ref: "#/components/schemas/TransactionType"
        createdAt:
          type: string
          description: Timestamp of the occurrence of the transaction in RFC3339 format
          example: 2025-01-02T15:04:05+07:00
        note:
          type: string
          description: Optional note about the transaction
          example: "Restock from supplier ABC"
        savedAt:
          type: string
          description: Timestamp of saving the transaction to storage in RFC3339 format
          example: 2025-01-02T15:04:05+07:00
    CreateTransactionItem:
      type: object
      required:
        - commodityID
        - amount
        - type
        - createdAt
      properties:
        commodityID:
          type: string
          example: "08d2e30b-8e64-4414-9fee-ad93c80a5264"
        amount:
          type: integer
          description: Number representing quantity change, positive or negative
          example: 5
        type:
          $ref: "#/components/schemas/TransactionType"
        createdAt:
          type: string
          description: Timestamp of the occurrence of the transaction in RFC3339 format
          example: 2025-01-02T15:04:05+07:00
        note:
          type: string
          description: Optional note about the transaction
          example: "Restock from supplier ABC"
    CreateTransactionRequest:
      type: object
      required: 
        - data
      properties:
        data:   
          $ref: "#/components/schemas/CreateTransactionItem"
    CreateTransactionResponse:
      type: object
      required: 
        - data
      properties:
        data:   
          $ref: "#/components/schemas/TransactionItem"
    # Error
    ErrorResponse:
      type: object
      required:
        - errors
      properties:
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorItem"
    ErrorItem:
      type: object
      required:
        - id
        - status
        - detail
        - meta
      properties:
        id:
          type: string
          description: Identificator of a request
          example: bd124f62-27ff-4ed7-ad8b-5df0fa73e2c1
        status:
          type: string
          description: The HTTP status code applicable to this problem, expressed as a string value
          example: "400"
        detail:
          type: string
          description: A human-readable explanation specific to this occurrence of the problem
          example: Bad commodity name
        meta:
          $ref: "#/components/schemas/ErrorMeta"
    ErrorMeta:
      type: object
      properties:
        timestamp:
          type: string
          description: Timestamp of the occurrence of the problem in RFC3339 format
          example: 2025-01-02T15:04:05Z07:00
